{"version":3,"sources":["angular-money-directive.min.js"],"names":["NUMBER_REGEXP","DEFAULT_PRECISION","angular","module","directive","$parse","$filter","$locale","link","scope","el","attrs","ngModelCtrl","round","num","d","Math","pow","precision","isPrecisionValid","isNaN","isValueValid","value","sanitizeValue","isNumber","updateValuePrecision","modelValue","$modelValue","ngModel","assign","changeViewValue","buildViewValue","lastValidViewValue","$viewValue","replace","NUMBER_FORMATS","GROUP_SEP","DECIMAL_SEP","$commitViewValue","$render","minVal","maxVal","isDefined","isUndefined","$parsers","push","$isEmpty","indexOf","test","parseFloat","$validators","min","ngMin","$observe","val","undefined","$validate","max","ngMax","parseInt","$formatters","bind","restrict","require"],"mappings":"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","file":"angular-money-directive.min.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * Heavily adapted from the `type=\"number\"` directive in Angular's\n * /src/ng/directive/input.js\n */\n\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d*)))\\s*$/;\nvar DEFAULT_PRECISION = 2;\n\nangular.module('fiestah.money', [])\n\n.directive('money', [\"$parse\", \"$filter\", \"$locale\", function ($parse, $filter, $locale) {\n  function link(scope, el, attrs, ngModelCtrl) {\n    var minVal, maxVal, precision, lastValidViewValue;\n    var isDefined = angular.isDefined;\n    var isUndefined = angular.isUndefined;\n    var isNumber = angular.isNumber;\n\n    /**\n     * Returns a rounded number in the precision setup by the directive\n     * @param  {Number} num Number to be rounded\n     * @return {Number}     Rounded number\n     */\n    function round(num) {\n      var d = Math.pow(10, precision);\n      return Math.round(num * d) / d;\n    }\n\n    /**\n     * Returns a string that represents the rounded number\n     * @param  {Number} value Number to be rounded\n     * @return {String}       The string representation\n     */\n    function formatPrecision(value) {\n      return parseFloat(value).toFixed(precision);\n    }\n\n    function isPrecisionValid() {\n      return !isNaN(precision) && precision > -1;\n    }\n\n    function isValueValid(value) {\n      value = sanitizeValue(value);\n      return angular.isNumber(value) && !isNaN(value);\n    }\n\n    function updateValuePrecision() {\n      var modelValue = ngModelCtrl.$modelValue;\n\n      if (isValueValid(modelValue) && isPrecisionValid()) {\n        ngModelCtrl.$modelValue = round(modelValue);\n        $parse(attrs.ngModel).assign(scope, ngModelCtrl.$modelValue);\n        changeViewValue(buildViewValue(modelValue));\n\n        // Save the rounded view value\n        lastValidViewValue = ngModelCtrl.$viewValue;\n      }\n    }\n\n    function sanitizeValue(value) {\n      if(!angular.isNumber(value)){\n        value = value.replace($locale.NUMBER_FORMATS.GROUP_SEP, '');\n        value = value.replace($locale.NUMBER_FORMATS.DECIMAL_SEP, '.');\n      }\n      return value;\n    }\n\n    function buildViewValue(value) {\n      return $filter('number')(value, precision);\n    }\n\n    function changeViewValue(value) {\n      ngModelCtrl.$viewValue = value;\n      ngModelCtrl.$commitViewValue();\n      ngModelCtrl.$render();\n    }\n\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (ngModelCtrl.$isEmpty(value)) {\n        lastValidViewValue = value;\n        return null;\n      }\n\n      value = sanitizeValue(value);\n\n      // Handle leading decimal point, like \".5\"\n      if (value.indexOf('.') === 0) {\n        value = '0' + value;\n      }\n\n      // Allow \"-\" inputs only when min < 0\n      if (value.indexOf('-') === 0) {\n        if (minVal >= 0) {\n          changeViewValue('');\n          return null;\n        } else if (value === '-' || value === '-.') {\n          return null;\n        }\n      }\n\n      if (NUMBER_REGEXP.test(value)) {\n        // Save as valid view value if it's a number\n        lastValidViewValue = value;\n        return parseFloat(value);\n      } else {\n        // Render the last valid input in the field\n        changeViewValue(lastValidViewValue);\n        return lastValidViewValue;\n      }\n    });\n\n\n    // Min validation\n    ngModelCtrl.$validators.min = function (value) {\n      return ngModelCtrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n    };\n    if (isDefined(attrs.min) || attrs.ngMin) {\n      attrs.$observe('min', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        minVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    } else {\n      minVal = 0;\n    }\n\n\n    // Max validation\n    if (isDefined(attrs.max) || attrs.ngMax) {\n      ngModelCtrl.$validators.max = function(value) {\n        return ngModelCtrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n      };\n\n      attrs.$observe('max', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        maxVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    }\n\n    // Round off (disabled by \"-1\")\n    if (isDefined(attrs.precision)) {\n      precision = parseInt(attrs.precision, 10);\n      attrs.$observe('precision', function (value) {\n        precision = parseInt(value, 10);\n\n        updateValuePrecision();\n      });\n    } else {\n      precision = DEFAULT_PRECISION;\n    }\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (value) {\n        // Round off value to specified precision\n        value = isPrecisionValid() ? round(value) : value;\n      }\n      return value;\n    });\n\n    ngModelCtrl.$formatters.push(function (value) {\n      if (isDefined(value)) {\n        return isPrecisionValid() && isValueValid(value) ?\n          buildViewValue(value) : value;\n      } else {\n        return '';\n      }\n    });\n\n    // Auto-format precision on blur\n    el.bind('blur', function () {\n      ngModelCtrl.$commitViewValue();\n      updateValuePrecision();\n    });\n  }\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: link\n  };\n}]);\n\n})();\n"]}