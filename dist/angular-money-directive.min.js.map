{"version":3,"sources":["angular-money-directive.min.js"],"names":["NUMBER_REGEXP","DEFAULT_PRECISION","angular","module","directive","$parse","link","scope","el","attrs","ngModelCtrl","round","num","d","Math","pow","precision","formatPrecision","value","parseFloat","toFixed","isPrecisionValid","isNaN","isValueValid","isNumber","updateValuePrecision","modelValue","$modelValue","ngModel","assign","changeViewValue","lastValidViewValue","$viewValue","$commitViewValue","$render","minVal","maxVal","isDefined","isUndefined","$parsers","push","$isEmpty","indexOf","test","$validators","min","ngMin","$observe","val","undefined","$validate","max","ngMax","parseInt","$formatters","bind","restrict","require"],"mappings":"CAAA,WACA,YAOA,IAAIA,GAAgB,yCAChBC,EAAoB,CAExBC,SAAQC,OAAO,oBAEdC,UAAU,SAAU,SAAU,SAAUC,GACvC,QAASC,GAAKC,EAAOC,EAAIC,EAAOC,GAW9B,QAASC,GAAMC,GACb,GAAIC,GAAIC,KAAKC,IAAI,GAAIC,EACrB,OAAOF,MAAKH,MAAMC,EAAMC,GAAKA,EAQ/B,QAASI,GAAgBC,GACvB,MAAOC,YAAWD,GAAOE,QAAQJ,GAGnC,QAASK,KACP,OAAQC,MAAMN,IAAcA,EAAY,GAG1C,QAASO,GAAaL,GACpB,MAAOhB,SAAQsB,SAASN,KAAWI,MAAMJ,GAG3C,QAASO,KACP,GAAIC,GAAahB,EAAYiB,WAEzBJ,GAAaG,IAAeL,MAC9BX,EAAYiB,YAAchB,EAAMe,GAChCrB,EAAOI,EAAMmB,SAASC,OAAOtB,EAAOG,EAAYiB,aAChDG,EAAgBb,EAAgBS,IAGhCK,EAAqBrB,EAAYsB,YAIrC,QAASF,GAAgBZ,GACvBR,EAAYsB,WAAad,EACzBR,EAAYuB,mBACZvB,EAAYwB,UAhDd,GAAIC,GAAQC,EAAQpB,EAAWe,EAC3BM,EAAYnC,QAAQmC,UACpBC,EAAcpC,QAAQoC,YACtBd,EAAWtB,QAAQsB,QAiDvBd,GAAY6B,SAASC,KAAK,SAAUtB,GAClC,GAAIR,EAAY+B,SAASvB,GAEvB,MADAa,GAAqBb,EACd,IAST,IAL2B,IAAvBA,EAAMwB,QAAQ,OAChBxB,EAAQ,IAAMA,GAIW,IAAvBA,EAAMwB,QAAQ,KAAY,CAC5B,GAAIP,GAAU,EAEZ,MADAL,GAAgB,IACT,IACF,IAAc,MAAVZ,GAA2B,OAAVA,EAC1B,MAAO,MAIX,MAAIlB,GAAc2C,KAAKzB,IAErBa,EAAqBb,EACdC,WAAWD,KAGlBY,EAAgBC,GACTA,KAMXrB,EAAYkC,YAAYC,IAAM,SAAU3B,GACtC,MAAOR,GAAY+B,SAASvB,IAAUoB,EAAYH,IAAWjB,GAASiB,GAEpEE,EAAU5B,EAAMoC,MAAQpC,EAAMqC,MAChCrC,EAAMsC,SAAS,MAAO,SAASC,GACzBX,EAAUW,KAASxB,EAASwB,KAC9BA,EAAM7B,WAAW6B,EAAK,KAExBb,EAASX,EAASwB,KAAS1B,MAAM0B,GAAOA,EAAMC,OAC9CvC,EAAYwC,cAGdf,EAAS,GAKPE,EAAU5B,EAAM0C,MAAQ1C,EAAM2C,SAChC1C,EAAYkC,YAAYO,IAAM,SAASjC,GACrC,MAAOR,GAAY+B,SAASvB,IAAUoB,EAAYF,IAAoBA,GAATlB,GAG/DT,EAAMsC,SAAS,MAAO,SAASC,GACzBX,EAAUW,KAASxB,EAASwB,KAC9BA,EAAM7B,WAAW6B,EAAK,KAExBZ,EAASZ,EAASwB,KAAS1B,MAAM0B,GAAOA,EAAMC,OAC9CvC,EAAYwC,eAKZb,EAAU5B,EAAMO,WAClBP,EAAMsC,SAAS,YAAa,SAAU7B,GACpCF,EAAYqC,SAASnC,EAAO,IAE5BO,MAGFT,EAAYf,EAGdS,EAAY6B,SAASC,KAAK,SAAUtB,GAKlC,MAJIA,KAEFA,EAAQG,IAAqBV,EAAMO,GAASA,GAEvCA,IAGTR,EAAY4C,YAAYd,KAAK,SAAUtB,GACrC,MAAImB,GAAUnB,GACLG,KAAsBE,EAAaL,GACxCD,EAAgBC,GAASA,EAEpB,KAKXV,EAAG+C,KAAK,OAAQ,WACd7C,EAAYuB,mBACZR,MAIJ,OACE+B,SAAU,IACVC,QAAS,UACTnD,KAAMA","file":"angular-money-directive.min.js","sourcesContent":["(function () {\n'use strict';\n\n/**\n * Heavily adapted from the `type=\"number\"` directive in Angular's\n * /src/ng/directive/input.js\n */\n\nvar NUMBER_REGEXP = /^\\s*(\\-|\\+)?(\\d+|(\\d*(\\.\\d{0,2})))\\s*$/;\nvar DEFAULT_PRECISION = 2;\n\nangular.module('fiestah.money', [])\n\n.directive('money', [\"$parse\", function ($parse) {\n  function link(scope, el, attrs, ngModelCtrl) {\n    var minVal, maxVal, precision, lastValidViewValue;\n    var isDefined = angular.isDefined;\n    var isUndefined = angular.isUndefined;\n    var isNumber = angular.isNumber;\n\n    /**\n     * Returns a rounded number in the precision setup by the directive\n     * @param  {Number} num Number to be rounded\n     * @return {Number}     Rounded number\n     */\n    function round(num) {\n      var d = Math.pow(10, precision);\n      return Math.round(num * d) / d;\n    }\n\n    /**\n     * Returns a string that represents the rounded number\n     * @param  {Number} value Number to be rounded\n     * @return {String}       The string representation\n     */\n    function formatPrecision(value) {\n      return parseFloat(value).toFixed(precision);\n    }\n\n    function isPrecisionValid() {\n      return !isNaN(precision) && precision > -1;\n    }\n\n    function isValueValid(value) {\n      return angular.isNumber(value) && !isNaN(value);\n    }\n\n    function updateValuePrecision() {\n      var modelValue = ngModelCtrl.$modelValue;\n\n      if (isValueValid(modelValue) && isPrecisionValid()) {\n        ngModelCtrl.$modelValue = round(modelValue);\n        $parse(attrs.ngModel).assign(scope, ngModelCtrl.$modelValue);\n        changeViewValue(formatPrecision(modelValue));\n\n        // Save the rounded view value\n        lastValidViewValue = ngModelCtrl.$viewValue;\n      }\n    }\n\n    function changeViewValue(value) {\n      ngModelCtrl.$viewValue = value;\n      ngModelCtrl.$commitViewValue();\n      ngModelCtrl.$render();\n    }\n\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (ngModelCtrl.$isEmpty(value)) {\n        lastValidViewValue = value;\n        return null;\n      }\n\n      // Handle leading decimal point, like \".5\"\n      if (value.indexOf('.') === 0) {\n        value = '0' + value;\n      }\n\n      // Allow \"-\" inputs only when min < 0\n      if (value.indexOf('-') === 0) {\n        if (minVal >= 0) {\n          changeViewValue('');\n          return null;\n        } else if (value === '-' || value === '-.') {\n          return null;\n        }\n      }\n\n      if (NUMBER_REGEXP.test(value)) {\n        // Save as valid view value if it's a number\n        lastValidViewValue = value;\n        return parseFloat(value);\n      } else {\n        // Render the last valid input in the field\n        changeViewValue(lastValidViewValue);\n        return lastValidViewValue;\n      }\n    });\n\n\n    // Min validation\n    ngModelCtrl.$validators.min = function (value) {\n      return ngModelCtrl.$isEmpty(value) || isUndefined(minVal) || value >= minVal;\n    };\n    if (isDefined(attrs.min) || attrs.ngMin) {\n      attrs.$observe('min', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        minVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    } else {\n      minVal = 0;\n    }\n\n\n    // Max validation\n    if (isDefined(attrs.max) || attrs.ngMax) {\n      ngModelCtrl.$validators.max = function(value) {\n        return ngModelCtrl.$isEmpty(value) || isUndefined(maxVal) || value <= maxVal;\n      };\n\n      attrs.$observe('max', function(val) {\n        if (isDefined(val) && !isNumber(val)) {\n          val = parseFloat(val, 10);\n        }\n        maxVal = isNumber(val) && !isNaN(val) ? val : undefined;\n        ngModelCtrl.$validate();\n      });\n    }\n\n    // Round off (disabled by \"-1\")\n    if (isDefined(attrs.precision)) {\n      attrs.$observe('precision', function (value) {\n        precision = parseInt(value, 10);\n\n        updateValuePrecision();\n      });\n    } else {\n      precision = DEFAULT_PRECISION;\n    }\n\n    ngModelCtrl.$parsers.push(function (value) {\n      if (value) {\n        // Round off value to specified precision\n        value = isPrecisionValid() ? round(value) : value;\n      }\n      return value;\n    });\n\n    ngModelCtrl.$formatters.push(function (value) {\n      if (isDefined(value)) {\n        return isPrecisionValid() && isValueValid(value) ?\n          formatPrecision(value) : value;\n      } else {\n        return '';\n      }\n    });\n\n    // Auto-format precision on blur\n    el.bind('blur', function () {\n      ngModelCtrl.$commitViewValue();\n      updateValuePrecision();\n    });\n  }\n\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: link\n  };\n}]);\n\n})();\n"],"sourceRoot":"/source/"}